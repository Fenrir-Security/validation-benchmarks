name: Build and Push Docker Images to GHCR

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    outputs:
      benchmarks: ${{ steps.generate-matrix.outputs.benchmarks }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Generate benchmark matrix
        id: generate-matrix
        run: |
          cd benchmarks
          BENCHMARKS=$(ls -1 | grep "XBEN-" | jq -R -s -c 'split("\n")[:-1]')
          echo "benchmarks=$BENCHMARKS" >> $GITHUB_OUTPUT
          echo "Found benchmarks: $BENCHMARKS"

  build-and-push:
    needs: build-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        benchmark: ${{ fromJson(needs.build-matrix.outputs.benchmarks) }}
      fail-fast: false # Continue building other images even if one fails
      max-parallel: 5 # Limit parallel builds to avoid resource exhaustion
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Verify Docker Compose
        run: |
          echo "Docker version:"
          docker --version
          echo "Docker Compose version:"
          docker compose version
          echo "Docker Compose plugin is available âœ“"

      - name: Build images using make
        run: |
          echo "Building ${{ matrix.benchmark }} using make build"
          cd benchmarks/${{ matrix.benchmark }}
          make build

      - name: Extract and push images
        run: |
          BENCHMARK_LOWER=$(echo "${{ matrix.benchmark }}" | tr '[:upper:]' '[:lower:]')
          cd benchmarks/${{ matrix.benchmark }}
          
          # Check if build guard exists to confirm build succeeded
          if [ ! -f .xben_build_done ]; then
            echo "Build guard file not found, build may have failed"
            exit 1
          fi
          
          # Read the image IDs from the build guard file
          if [ -f .xben_build_done ]; then
            echo "Found built images:"
            cat .xben_build_done
            
            # Get all images that match the benchmark pattern
            IMAGES=$(docker images "${BENCHMARK_LOWER}*" --format "{{.Repository}}:{{.Tag}}" | grep -v "<none>")
            
            if [ -z "$IMAGES" ]; then
              echo "No images found matching pattern ${BENCHMARK_LOWER}*"
              echo "Available images:"
              docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}"
              exit 1
            fi
            
            echo "Images to push:"
            echo "$IMAGES"
            
            # Push each image to GHCR
            echo "$IMAGES" | while read local_image; do
              if [ -z "$local_image" ]; then
                continue
              fi
              
              # Extract service name from image name
              # Format is typically: benchmarkname_servicename:latest or benchmarkname-servicename:latest
              SERVICE_NAME=$(echo "$local_image" | sed "s/${BENCHMARK_LOWER}[_-]//g" | sed 's/:latest$//')
              
              # Create GHCR tag
              GHCR_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${BENCHMARK_LOWER}-${SERVICE_NAME}:latest"
              
              echo "Tagging $local_image as $GHCR_TAG"
              docker tag "$local_image" "$GHCR_TAG"
              
              echo "Pushing $GHCR_TAG to GHCR"
              docker push "$GHCR_TAG"
              echo "Successfully pushed $GHCR_TAG"
            done
          else
            echo "No build guard file found, skipping push"
          fi

      - name: Clean up local images
        if: always()
        run: |
          # Clean up local images to save space
          cd benchmarks/${{ matrix.benchmark }}
          docker compose down --rmi local --volumes --remove-orphans || true
          docker system prune -f || true
          # Clean up make build artifacts
          make clean || true